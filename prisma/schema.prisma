// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  LEADER
  DEVELOPER
}

model User {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  password    String
  role        UserRole  @default(DEVELOPER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  summaries   Summary[]
  projects    Project[] @relation("UserProjects")
  ownedProjects Project[] @relation("ProjectOwner")
}

model Project {
  id          String    @id @default(uuid())
  name        String
  description String?
  ownerId     String
  owner       User      @relation("ProjectOwner", fields: [ownerId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  summaries   Summary[]
  users       User[]    @relation("UserProjects")

  @@index([ownerId])
}

model Summary {
  id          String      @id @default(uuid())
  text        String
  date        DateTime    @default(now())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  projectId   String
  user        User        @relation(fields: [userId], references: [id])
  project     Project     @relation(fields: [projectId], references: [id])
  tags        Tag[]       @relation("SummaryTags")
  blockers    Blocker[]   @relation("SummaryBlockers")
  suggestions Suggestion[] @relation("SummarySuggestions")

  @@index([userId])
  @@index([projectId])
  @@index([date])
  @@index([createdAt])
}

model Tag {
  id          String    @id @default(uuid())
  name        String    @unique
  summaries   Summary[] @relation("SummaryTags")
}

model Blocker {
  id          String    @id @default(uuid())
  name        String    @unique
  summaries   Summary[] @relation("SummaryBlockers")
}

model Suggestion {
  id          String    @id @default(uuid())
  text        String
  summaries   Summary[] @relation("SummarySuggestions")
}

model BuildError {
  id              String     @id @default(uuid())
  message         String
  stack           String?
  type            String     // build, test, lint, typecheck, runtime
  severity        String     // critical, high, medium, low
  file            String?
  line            Int?
  column          Int?
  projectId       String
  userId          String
  solved          Boolean    @default(false)
  solutionApplied String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  user           User        @relation(fields: [userId], references: [id])
  project        Project     @relation(fields: [projectId], references: [id])

  @@index([projectId])
  @@index([userId])
  @@index([type])
  @@index([solved])
  @@index([createdAt])
}
